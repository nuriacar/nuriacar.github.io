---
layout: post
title:  Yapay Zeka 101 [ 2. Bölüm ]
date:   2020-10-06 16:16:16 +0300
categories: ai
---

[![Elements of Yapay Zeka](/assets/img/elements-of-ai.jpg "Elements of Yapay Zeka")](https://course.elementsofai.com/)

[![Helsinki Üniversitesi](/assets/img/helsinki-uni-logo-mini.png "Helsinki Üniversitesi")](https://www.helsinki.fi/en)
[![Reaktor](/assets/img/reaktor-logo-mini.png "Reaktor")](https://www.reaktor.com/)
[![mooc.fi](/assets/img/mooc-fi-logo-mini.png "mooc.fi")](https://mooc.fi/en)
{: style="text-align: center;"}

2018'de [Finlandiya Helsinki Üniversitesi](https://helsinki.fi/en), bazı
Bilgisayar Bilimleri derslerini [mooc.fi](http://mooc.fi/en) üzerinden erişime
açtı. Ben de görür görmez kaydoldum ve eğitimler sisteme yüklendikçe buradaki
dersleri almaya koyuldum. Kaydolduğum ilk eğitim
[Reaktor](https://reaktor.com) işbirliği ile hazırlanan [Yapay Zeka
Temelleri](https://course.elementsofai.com/) eğitimiydi. Yapabildiğim kadar
tercüme ettim. Kısa süre önce de tekrardan gözden geçirip yayınlama kararı
aldım. Toplamda altı bölüm olacak. Zamanla tüm bölümler yüklenmiş olur.

[Ey benim paşalarım, beylerim, ağalarım; şu şehr-i Konstantıniyye cengindeki
silah arkadaşlarım!..](https://tr.wikipedia.org/wiki/II._Mehmed) Biz bize
kaldık madem, afterparty başlasın...

[![YZ 101 Bölüm 1](/assets/img/maze-mini.png "1. Yapay Zeka Nedir?")](/ai/2020/10/05/yapay-zeka-101-1.html)
[![YZ 101 Bölüm 2](/assets/img/maze-mini.png "2. Yapay Zeka Problemi Çözme")](/ai/2020/10/06/yapay-zeka-101-2.html)
[![YZ 101 Bölüm 3](/assets/img/maze-mini.png "3. Gerçek Dünyada Yapay Zeka")](/ai/2020/10/07/yapay-zeka-101-3.html)
[![YZ 101 Bölüm 4](/assets/img/maze-mini.png "4. Makine Öğrenmesi (Machine Learning)")](/ai/2020/10/08/yapay-zeka-101-4.html)
[![YZ 101 Bölüm 5](/assets/img/maze-mini.png "5. Sinir Ağları (Neural Networks)")](/ai/2020/10/09/yapay-zeka-101-5.html)
{: style="text-align: center;"}

---

## Bölümler

1. Yapay Zeka Nedir?
2. Yapay Zeka Problemi Çözme
3. Gerçek Dünyada Yapay Zeka
4. Makine Öğrenmesi (Machine Learning)
5. Sinir Ağları (Neural Networks)
6. Yapay Zeka Uygulamaları (Implications)

## 2. Yapay Zeka Problemi Çözme

![YZ 101 2 Afiş](/assets/img/yz-101-2-afis.png "YZ 101 2 Afiş")

Arama algoritmaları havalı Yapay Zeka yöntemleri gibi hissettirmez. Ancak,
çoğumuzun kabul edeceği gibi navigasyon veya satranç gibi zeka gerektiren
görevleri çözmek için kullanılabilirler.

Bu kısımda şu konuları ele alacağız:

1. Arama ve problem çözme
2. Yapay Zeka ile problem çözme
3. Arama ve oyunlar

---

### 2.1. Arama ve problem çözme

Birçok problem arama problemi olarak ifade edilebilir. Bu, alternatif
seçimleri ve bunların sonuçlarını formüle ederek başlamamızı gerektirir.

Pratikte Arama: A'dan B'ye gitme

Yabancı bir şehirde olduğunuzu düşünün, bir adreste (bir otel diyelim) ve
başka bir adrese gitmek için toplu taşıma araçlarını kullanmak
isteyebilirsiniz (belki de hoş bir restoran). Ne yaparsınız? Birçok kişi
gibiyseniz, akıllı telefonunuzu çıkarırsınız, varış noktasını girer ve
talimatları izlemeye başlarsınız.

![YZ 101 2 A'dan B'ye](/assets/img/yz-101-2-a-dan-b-ye.png "YZ 101 2 A'dan B'ye")

Bu soru, arama ve planlama problemlerine aittir. Benzer problemler, kendi
kendini süren araçlar için veya oyun oynamak için (belki biraz gizli gibi
lakin) Yapay Zeka tarafından çözülmelidir. Örneğin, satranç oyununda,
taşlarınızı rakibinizden korumak için onları A'dan B'ye taşımak pek de zor
değildir.

![YZ 101 2 Arama 1](/assets/img/yz-101-2-arama-1.png "YZ 101 2 Arama 1")

Çoğu zaman problemi çözmek için birçok farklı yol vardır. Bunlardan bazıları
zaman, çaba, maliyet ya da diğer kriterler açısından daha fazla tercih
edilebilir. Farklı arama teknikleri farklı çözümlere yol açabilir ve gelişmiş
arama algoritmalarının geliştirilmesi yerleşik bir araştırma alanıdır.

![YZ 101 2 Arama 2](/assets/img/yz-101-2-arama-2.png "YZ 101 2 Arama 2")

Gerçek arama algoritmalarına odaklanmayacağız. Bunun yerine, problem çözme
sürecinin ilk aşamasını vurgulamaktayız: Yani tercihleri ve sonuçlarını,
çoğunlukla önemsiz olmaktan uzak ve dikkatli düşünmeyi gerektirecek şekilde
tanımlamak. Ayrıca amacımızın ne olduğunu, diğer bir deyişle, sorunun
çözüldüğünü düşündüğümüzde tanımlamamız gerekir. Bu yapıldıktan sonra,
başlangıç durumundan hedefe giden bir dizi eylemi arayabiliriz.

Bu bölümde, iki tür problemi tartışacağız:

+ Sadece bir oyuncu (agent) ile statik ortamlarda arama ve planlama.
+ Birbiriyle yarışan iki oyunculu (agents) oyunlar.

Bu kategoriler, tüm olası gerçek dünya senaryolarını kapsamaz ancak ana
kavramları ve teknikleri göstermek için yeterince geneldir.

Navigasyon veya satranç gibi karmaşık arama görevlerini ele almadan önce,
sorunları Yapay Zeka tarafından nasıl çözebileceğimize dair anlayışımızı
geliştirmek için çok basitleştirilmiş bir modelden başlayalım.  

#### Kolay/Bebek oyuncağı problem: Tavuk geçirme

![YZ 101 2 Tavuk Geçirme](/assets/img/yz-101-2-tavuk-gecirme.png "YZ 101 2 Tavuk Geçirme")

Fikirleri örneklemek için basit bir bulmacadan başlayacağız. Bir robotun bir
nehrin karşı kıyısına kayıkla üç parça kargo taşıması gerekir: Tilki, tavuk ve
tavuk yemi çuvalı. Şayet imkanı varsa tilki tavuğu yiyecektir, tavuk imkanı
varsa tavuk yemini yiyecektir ve biz her ikisini de istemeyiz. Robot
hayvanlara yakın oldupunda zarar vermelerini engelleyebilir ancak robot
yalnızca şunları yapabilir: Kayığını çalıştırıp kargo parçalarından sadece
ikisini, kendisiyle birlikte kayığa yerleştirebilir. Robot tüm kargo
parçalarını (tilki, tavuk, tavuk yemi) nehrin karşı kıyısına nasıl
taşıyabilir?

> **Not**
>
> **Kayık bulmacasının kolay versiyonu**
>
> Bu bilmeceyi daha önce duymuşsanız, teknede daha az sayıda kargo taşıyarak
> da çözülebileceğini biliyor olabilirsiniz. Bu, daha kolay olan bu sürümü
> birlikte çözdükten sonra, alıştırma olarak karşınıza çıkacak.

Bulmacayı, beş adet hareketli şey tespit edildiğini belirterek modelleyeceğiz:
Robot, kayık, tilki, tavuk ve tavuk yemi. Prensipte, bu beş haraketli şeyden
her biri, nehrin her iki tarafında olabilir ancak sadece robot kayığı
çalıştırabileceğinden, kayık ve robotun her ikisi de her zaman aynı tarafta
olacaktır. Böylece, her biri için iki olası pozisyona sahip dört şey vardır,
bu da onaltı kombinasyon ifade eder. Biz bunlara durumlar diyeceğz:

**Tavuk geçişi bulmacası durumları**

**1: Nehrin Yakın Kıyısı - 2: Nehrin Uzak Kıyısı**

**Durum**|**Robot**|**Tilki**|**Tavuk**|**Tavuk Yemi**
|---|---|---|---|---|
1111|1|1|1|1
1112|1|1|1|2
1121|1|1|2|1
1122|1|1|2|2
1211|1|2|1|1
1212|1|2|1|2
1221|1|2|2|1
1222|1|2|2|2
2111|2|1|1|1
2112|2|1|1|2
2121|2|1|2|1
2122|2|1|2|2
2211|2|2|1|1
2212|2|2|1|2
2221|2|2|2|1
2222|2|2|2|2
{: style="text-align: center;"}

Durumlara kısa isimler verdik, çünkü aksi takdirde onlar hakkında konuşmak
zahmetli olur. Şimdi başlangıç durumunun 1111 olduğunu ve hedef durumun 2222
olduğunu söyleyebiliriz. Sanıyorum şu hali tercih etmezdiniz: "Başlangıç
durumunda, robot yakın tarafta, tilki yakın tarafta, tavuk yakın tarafta ve
ayrıca tavuk yemi yakın tarafta ve hedef durumda, robot uzak tarafta, tilki
uzak tarafta, tavuk uzak tarafta, tavuk yemi uzak tarafta" vb.

Bu durumlardan bazıları, bulmaca şartları yüzünden yasaklı. Örneğin, 1221
durumunda (robotun tavuk yemiyle aynı tarafta olduğu ancak tilki ve tavuğun
diğer tarafta olduğu anlamına gelir) tilki tavuğu yiyecektir.  Böylece 1221,
1222, 2112, 2111, 1122 ve 2211 (mantığımızdan şüpheliyseniz her birini tek tek
kontrol edebilirsiniz) durumlarını eleyebiliriz. Elimizde şu on durum kaldı:

**1: Nehrin Yakın Kıyısı - 2: Nehrin Uzak Kıyısı**

**Durum**|**Robot**|**Tilki**|**Tavuk**|**Tavuk Yemi**
|---|---|---|---|---|
1111|1|1|1|1
1112|1|1|1|2
1121|1|1|2|1
1211|1|2|1|1
1212|1|2|1|2
2121|2|1|2|1
2122|2|1|2|2
2212|2|2|1|2
2221|2|2|2|1
2222|2|2|2|2
{: style="text-align: center;"}

Birazdan, hangi durum geçişlerinin mümkün olduğunu anlayacağız. Bu, basit
manada, robot kargo parçalarından herhangi ikisini taşırken, her bir taşımada
oluşan durumu göstermek demek. Geçişlerin diyagramını çizmek en iyisi. Fakat
geçişlere başlamadan önce, yani herhangi bir geçiş yapmadan önce,
başlangıçların 1. ve 2. kıyı arasında değişme durumunu göz önünde
bulundurarak, geçiş durumlarını iki satırda göstereceğiz: İlk satırda yakın
yani 1. kıyıdan başlayan durumlar (yani robot yakın kıyıda), ikinci satırsa
ise uzak yani 2. kıyıdan başlayan durumlar.

1111|1112|1121|1211|1212
2121|2122|2212|2221|2222
{: style="text-align: center;"}

![YZ 101 2 Tavuk Geçirme Durumlar 1](/assets/img/yz-101-2-tavuk-gecirme-durumlar-1.png "YZ 101 2 Tavuk Geçirme Durumlar 1")
N: Near, Yakın Kıyı, 1. Kıyı - F: Far, Uzak Kıyı, 2. Kıyı
{: style="color:gray; font-size: 80%; text-align: center;"}

Şimdi geçişleri çizelim. Yönleri bir düğümden diğerine işaret edecek şekilde
oklar çizebiliriz ancak bu bulmacada geçişler simetriktir: Eğer robot 1111
durumundan 2122 durumuna kadar kürek çekebiliyorsa, 2122'den 1111'e kürek
çekmek de eşit sayılır. Bu nedenle, geçişleri sade bir şekilde yönü olmayan
çizgilerle çizmek daha kolaydır. 1111'den başlayarak 2121, 2122, 2212 ve
2221'e gidebiliriz:

![YZ 101 2 Tavuk Geçirme Çizgiler 1](/assets/img/yz-101-2-tavuk-gecirme-cizgiler-1.png "YZ 101 2 Tavuk Geçirme Çizgiler 1")
N: Near, Yakın Kıyı, 1. Kıyı - F: Far, Uzak Kıyı, 2. Kıyı
{: style="color:gray; font-size: 80%; text-align: center;"}

Şimdi de diğerlerini dolduralım:

![YZ 101 2 Tavuk Geçirme Çizgiler 2](/assets/img/yz-101-2-tavuk-gecirme-cizgiler-2.png "YZ 101 2 Tavuk Geçirme Çizgiler 2")
N: Near, Yakın Kıyı, 1. Kıyı - F: Far, Uzak Kıyı, 2. Kıyı
{: style="color:gray; font-size: 80%; text-align: center;"}

Çözüme pek yaklaşmamamıza rağmen çözümü bulabilmek için "doğal zekamızla"
birazcık iş yaptık ve "doğal zekanızla" bulmacanın tamamını çözmüş
olabileceğinize dair birazcık şüphe var. Ancak binlerce, milyonlarca olası
çözüm adımının olduğu daha karmaşık problemler için sistematik veya mekanik
yaklaşımımız bizim için zor, basit bir bilgisayar için daha uygun olacaktır.
Artık alternatif durumları ve aralarındaki geçişleri formüle ettiğimize göre,
gerisi mekanik bir görev haline geliyor: Başlangıç durumu 1111'den son durum
2222'ye bir yol bulun.

Aşağıdaki görselde böyle bir yol renklendirilmiştir. Yol 1111'den 2221'e
(robot tilki ve tavuğu diğer tarafa götürür), oradan 1211'e (robot tavuğu
başlangıç tarafına geri götürür) ve son olarak 2222'ye (robot artık tavuğu ve
tavuk yemini taşıyabilir).

![YZ 101 2 Tavuk Geçirme Çizgiler 3](/assets/img/yz-101-2-tavuk-gecirme-cizgiler-3.png "YZ 101 2 Tavuk Geçirme Çizgiler 3")
N: Near, Yakın Kıyı, 1. Kıyı - F: Far, Uzak Kıyı, 2. Kıyı
{: style="color:gray; font-size: 80%; text-align: center;"}

#### Durum uzayı, geçişler ve maliyetler

Bir planlama problemini formalize etmek için durum uzayı, geçişler ve
maliyetler gibi kavramları kullanırız.

> **Anahtar Terminoloji**
>
> **Durum Uzayı**
>
> Olası durumlar kümesi anlamına gelir. Tavuk geçişi bulmacasında, durum uzayı
> izin verilen on durumdan (1111'den 2222'ye) oluşmaktaydı (fakat örneğin
> bulmaca kurallarının izin vermediği 1222 durum uzayına dahil değildi). Eğer
> görev A noktasından B noktasına gitmekse, durum uzayı başlangıç noktasından
> A ulaşılabilen (x, y) koordinatlarıyla tanımlanan konumlar kümesi olabilir.
> Ya da kısıtlı bir yer kümesi kullanabiliriz. Örneğin, farklı sokak
> adresleri: Böylece olası durumların sayısı sınırlıdır.
>
> **Geçişler**
>
> Örneğin 1111'le 2121 arasındaki gibi, durumlar arasında mümkün olan
> hareketlerdir. Geçişler demekle, tek bir eylemle gerçekleştirilebilen
> doğrudan geçişleri saydığımızı belirtmek önemlidir. Birden çok geçiş
> sekansı, örneğin A'dan C'ye, C'den D'ye ve D'den B'ye (hedef B) gibi bir
> dizi, bir geçişten ziyade bir yoldur.
>
> **Maliyetler**
>
> Çoğu zaman farklı geçişlerin hepsinin aynı olmadığı gerçeğini ifade eder.
> Bazı geçişler daha tercih edilebilir veya daha ucuz (kelimenin tam anlamıyla
> parasal anlamda olması gerekmez), diğerleri daha maliyetli olarak farklılık
> gösterebilirler. Bunu, her geçişe belirli bir maliyet ilişkilendirerek ifade
> edebiliriz. Amaç, kat edilen toplam mesafeyi en aza indirmekse, o zaman
> doğal maliyet, durumlar arasındaki coğrafi mesafedir. Öte yandan, aslında
> amaç mesafe yerine zamanı en aza indirmek olabilir ki bu durumda doğal
> maliyet tabii ki zaman olacaktır. Tüm geçişler eşitse, maliyetleri göz ardı
> edebiliriz.

#### Alıştırma 5: Daha küçük bir kayık

Bu bulmacanın geleneksel versiyonunda robot, tekneye sadece tek bir şey
sığdırabilir. Durum uzayı hala aynıdır ancak daha az geçiş mümkündür.

Aşağıdaki olası durumlarla birlikte diyagramı bir başlangıç noktası olarak
kullanarak, olası geçişleri çizin (bunu bir kalem ve kağıtla yapmak, olmadan
yapmaktan ÇOK daha kolaydır).

Durum geçiş diyagramını çizdikten sonra, 1111'den 2222'ye en kısa yolu bulun
ve geçişlerin sayısını hesaplayın.

Lütfen yanıtınızı en kısa yoldaki geçiş sayısı olarak yazın ("12" gibi tek bir
sayı). İpucu: Durumların sayısını değil, geçişlerin sayısını sayın. Örneğin,
1111 → 2212 → 1212 → 2222 yolundaki geçiş sayısı 4 yerine 3'tür.

![YZ 101 2 Alıştırma 5 Tavuk Geçirme](/assets/img/yz-101-2-alistirma-5-tavuk-gecirme.png "YZ 101 2 Alıştırma 5 Tavuk Geçirme")
N: Near, Yakın Kıyı, 1. Kıyı - F: Far, Uzak Kıyı, 2. Kıyı
{: style="color:gray; font-size: 80%; text-align: center;"}

**Bu benim çözümüm:**

Başlangıç 1111'den hedef 2222'ye giden en kısa iki yol var: 

1. yol: 1111 → 2121 → 1121 → 2221 → 1211 → 2212 → 1212 → 2222
2. yol: 1111 → 2121 → 1121 → 2122 → 1112 → 2212 → 1212 → 2222

Sezgisel olarak, strateji, önce tavuğu diğer tarafa taşımak ve sonra geri
dönüp ya tilkiyi ya da yemi almak ve onu da uzak tarafa götürmektir. Robot
daha sonra tavuğu yenmekten veya yemi yemekten kurtarmak için ikisinden birini
yakın tarafa geri götürür ve kalan diğer nesneyi (tilki veya yem) yakın
taraftan uzak tarafa götürür. Sonunda robot tavuğu almaya gider ve hedefe
ulaşmak için onu uzak tarafa götürür. Sonuç olarak:

Durum sayısı: 8, Geçiş sayısı: 7

#### Alıştırma 6: Hanoi Kuleleri

Başka bir bulmaca yapalım: Ünlü [Hanoi
Kuleleri](https://www.britannica.com/topic/Tower-of-Hanoi). Bizim
versiyonumuzda, bulmaca üç pim ve biri büyük diğeri küçük iki disk içerir
(aslında, herhangi bir sayıda disk olabilir ancak alıştırma için, prensibi
göstermek için iki yeterli).

İlk durumda, her iki disk de ilk (en soldaki) pimde istiflenir. Amaç, diskleri
üçüncü pime taşımaktır. Üzerinde başka disk olmadığı sürece, her seferinde bir
diski herhangi bir pimden diğerine taşıyabilirsiniz. Küçük bir diskin üzerine
daha büyük bir disk yerleştirilmesine izin verilmez.

Bu görsel ilk durumu ve hedef durumunu gösterir. Toplam olası durum sayısının
dokuz olması için yedi başka durum daha vardır: Büyük diski yerleştirmenin üç
yolu ve her biri için küçük diski yerleştirmenin üç yolu.

![YZ 101 2 Alıştırma 6 Hanoi Kuleleri 1](/assets/img/yz-101-2-alistirma-6-hanoi-kuleleri-1.png "YZ 101 2 Alıştırma 6 Hanoi Kuleleri 1")

**Göreviniz**: Durum diyagramını çizin. Diyagram, oyundaki olası geçişleri
gösteren çizgilerle birbirine bağlı dokuz olası durumu içermelidir. Aşağıdaki
resim, durum diyagramının genel yapısını ve ilk üç durumun konumlarını
göstermektedir. Başlangıç durumundan (üst köşede), küçük diski hareket
ettirerek diğer iki duruma geçebileceğinizi gösterir. Kalan durumları doğru
yerlere yerleştirerek durum diyagramını tamamlayın. Geçişlerin yine simetrik
olduğunu ve diyagramda yanlara (sola veya sağa) veya yukarı hareket
edebileceğinizi unutmayın.

Görevi kalem ve kağıt kullanarak çözdükten sonra, diyagramda hangi durumun
hangi düğüme ait olduğunu seçerek çözümünüzü girin. (İpucu: Her durum tam
olarak bir düğüme aittir).

![YZ 101 2 Alıştırma 6 Hanoi Kuleleri 2](/assets/img/yz-101-2-alistirma-6-hanoi-kuleleri-2.png "YZ 101 2 Alıştırma 6 Hanoi Kuleleri 2")

**Yukarıdaki diyagramda her bir düğüm (1-6) için aşağıdan doğru A-F durumunu
seçin.**

![YZ 101 2 Alıştırma 6 Hanoi Kuleleri 3](/assets/img/yz-101-2-alistirma-6-hanoi-kuleleri-3.png "YZ 101 2 Alıştırma 6 Hanoi Kuleleri 3")

**Çözüm:** 1: E, 2: B, 3: F, 4: D, 5: C, 6: A

---

### 2.2. Yapay Zeka ile problem çözme

#### Yapay Zeka'nın tarihi üzerine bir ara: Aramadan başlayarak...

Yapay Zeka, bilgisayar bilimi kadar eskidir. Bilgisayarlara sahip olamamızdan
çok önceleri, insanlar, otomatik akıl yürütme ve zeka olasılığını düşündüler.
Bölüm 1'de daha önce bahsettiğimiz gibi, bu soruyu düşünen büyük
düşünürlerden biri Alan Turing idi. Turing testine ek olarak, Yapay Zeka'ya ve
daha genel olarak bilgisayar bilimlerine yaptığı katkılardan biri de,
hesaplanabilecek herhangi bir şeyin (sayı veya başka semboller kullanılarak
hesaplanan) otomatikleştirilebileceğini söylemesidir.

> **Not**
>
> **İkinci Dünya Savaşı'nın kazanılmasına yardımcı olmak**
>
> Turing, hesaplanabilir her şeyi hesaplayabilen çok basit bir cihaz
> tasarladı. Onun cihazı Turing makinesi olarak bilinir. Pratik olarak
> kullanışlı olmayan bir teorik model olsa da, Turing'i programlanabilir
> bilgisayarların mucidi haline getirmektedir. Ne yapmak üzere
> programlandıklarına bağlı olarak farklı görevleri gerçekleştirmek için
> kullanılabilen bilgisayarlar.
>
> Bu nedenle, her görev için farklı bir cihaz oluşturmak zorunda kalmadan,
> aynı bilgisayarı birçok görev için kullanıyoruz. Bu programlama fikridir.
> Bugün bu buluş önemsiz geliyor ama Turing’in günlerinde bundan çok uzaktı.
> İlk programlanabilir bilgisayarların bir kısmı, II. Dünya Savaşı sırasında,
> Turing'in de kişisel olarak dahil olduğu bir proje olan Alman gizli
> kodlarını kırmak için kullanıldı.

Yapay Zeka terimi genellikle, sıklıkla Yapay Zeka'nın Babası olarak da anılan
John McCarthy'ye (1927-2011) atfedilir. Terim, McCarthy ve diğerleri
tarafından 1956'da New Hampshire'daki Dartmouth College'da düzenlenen
[Dartmouth konferansı](https://en.wikipedia.org/wiki/Dartmouth_workshop)
olarak bilinen bir yaz seminerinin konusu olarak seçildiğinde yerleşti.
Semineri organize etme teklifinde McCarthy, Turing'in otomatik hesaplama
hakkındaki argümanı ile devam etti. Teklif aşağıdaki önemli ifadeyi içerir:

> **Not**
>
> **John McCarthy’in Yapay Zeka’la ilgili anahtar açıklaması**
>
> "Çalışma, öğrenmenin her yönünün veya zekanın başka herhangi bir özelliğinin
> prensip olarak, onu simüle etmek için bir makinenin yapılabileceği kadar
> kesin olarak tarif edilebileceği varsayımına dayanarak ilerleyecektir."

Başka bir deyişle, herhangi bir zeka unsuru küçük adımlara ayrılabilir,
böylece her bir adım, bir bilgisayar programı olarak yazılabilecek kadar basit
ve "mekanik" olur. Bu ifade, bugün hala bir varsayımdır ve bu, bunun doğru
olduğunu kanıtlayamayacağımız anlamına geliyor. Yine de, Yapay Zeka hakkında
düşünme şeklimize gelince, fikir kesinlikle temeldir. Örneğin, McCarthy'nin
Searle'ın Çin Odası deneyindeki herhangi bir argümanı atlatmak istediğini
gösterir: "Onu uygulayan sistem sadece bir programı izleyen bir bilgisayar
olsa bile zeka, zekadır!" der.

#### Yapay Zeka araştırmasında neden "arama" ve "oyun" merkezi rolde oldu?

Bilgisayarlar, 1950'lerde pratik Yapay Zeka algoritmaları ile deney yapmanın
mümkün olduğu seviyeye geldikçe, en belirgin Yapay Zeka problemleri (Nazi
kodlarını kırmanın yanı sıra) oyunlardı. Oyunlar kolayca biçimlendirilebilecek
uygun bir kısıtlı alan sağladı. Dama, satranç gibi masa oyunları ve son
zamanlarda oldukça belirgin bir şekilde Go (En az 2500 yıl önce Çin'de çıkan
son derece karmaşık bir strateji oyunu), sayısız araştırmacıya ilham kaynağı
oldu ve bunu yapmaya devam ediyor.

Oyunlarla yakından ilgili olarak, arama ve planlama teknikleri, Yapay Zeka'nın
1960'larda büyük ilerlemelere yol açtığı bir alandı: O zamanlar geliştirilen
Minimax algoritması veya Alpha-Beta Budama (Pruning) gibi adlara sahip
algoritmalar, oyun oynayan Yapay Zeka için hala temel teşkil ediyor ancak
elbette yıllar içinde daha gelişmiş varyantlar önerildi. Bu bölümde oyunları
ve planlama problemlerini kavramsal düzeyde inceleyeceğiz.

> **Not**
>
> Bu kısım orijinal kaynakta yok! Şadi Evren Şeker'in yazdıklarından aldım.
> Sağolsun, büyük bir özveriyle paylaşıyor, paylaşıyor. Zeplin dolusu iyi
> dilekler Şadi Hocam.
>
> **[Minimax Ağaçları](http://bilgisayarkavramlari.com/2009/04/29/minimax-agaclari-minimax-tree/)**
>
> Oyunlarda Yapay Zeka gereken durumlarda (satranç gibi kuralları ve hamleleri
> net oyunlar) bir "utility function"a göre (örneğin galibiyet 1, mağlubiyet -1)
> çözüm ağacı oluşturmayı ve bu şekilde oyunu kazandırmayı sağlayan şey. Buna
> göre makine, benim hamlelerimde "utility function" max, rakibimde min olursa
> kazanırım diyerek çözüm ağacını bu mantıkla gezer ve sonuçta en fazla
> utility'e sahip olduğum yaprakta durursam oyunu kazanırım diye düşünür. Ancak
> yine önemli nokta; çevrenin deterministik olması yani her hamle sonunda ne
> olacağı kesin olarak bilinen bir durumda olması gerekir.
>
> **[Alfa-Beta Budama (Prunning)](http://bilgisayarkavramlari.com/2009/11/23/alfa-beta-budamasi-alpha-beta-prunning/)**
>
> Bilgisayar bilimlerinde özellikle Yapay Zeka ve karar mekanizmalarının
> uygulanmasında çok kullanılan bir ağaç dolaşma algoritmasıdır. İsmindeki
> budama da bu ağaç üzerindeki bazı dalları kesmesinden gelmektedir.
>
> Yazının konusu olan Alfa-Beta Budama (Prunning) Minimax ağaçlarında (Minimax
> trees) kullanılır.
>
> Hamle sayısının az olduğu durumlarda Alfa-Beta Budama (Prunning)'e gerek
> yoktur. Ancak hamle sayısının çok fazla olduğu satranç veya Go gibi oyunlar
> düşünülürse bütün hamlelerin hesaplanması bilgisayarlar için (günümüz
> teknolojisinde hala) imkansızdır. Bu durumda hesaplamayı kolaylaştırmak için
> bu ağaç üzerinde bir iyileştirilmeye gidilmesi gerekir.
>
> İşte tam bu noktada Alfa-Beta Budama (Pruning) devreye girer. Ağacın bazı
> dallarının işlenmesi ve hamlelerinin sonucunun hesaplanması gereksizdir.
> Alfa-Beta Budama (Pruning) bu dalları tespit ederek budar. Yani bu dalları ve
> altlarını hesaplamayarak performans artışı hedeflenir.
>
>> [Şadi Evren Şeker](https://sadievrenseker.com)

---

### 2.3. Arama ve oyun

Bu bölümde klasik bir Yapay Zeka problemini inceleyeceğiz: Oyunlar. Netlik
uğruna odaklanacağımız en basit senaryo, tic-tac-toe ve satranç gibi iki
oyunculu, mükemmel bilgi oyunları.

#### Örnek: Tic tac toe oynamak

Maxine ve Minnie gerçek oyun tutkunları. Sadece oyunları severler. Özellikle
iki kişilik, tic-tac-toe veya satranç gibi mükemmel bilgi oyunlarını. Bir gün
tic-tac-toe oynuyorlardı. Maxine ya da arkadaşlarının ona seslendiği gibi Max
X'i, Minnie ya da arkadaşlarının ona seslendiği gibi Min O'yu oynuyordu. Min
sırası gelince oynadı ve oyun şöyle görünüyordu:

O|_|O
X|_|_
X|O|_
{: style="text-align: center;"}

![YZ 101 2 Tic-Tac-Toe 1](/assets/img/yz-101-2-tic-tac-toe-1.png "YZ 101 2 Tic-Tac-Toe 1")

Max tahtaya bakıyor ve bir sonraki hamlesini düşünüyordu, aniden yüzünü
umutsuzluk içinde ellerine gömdü, 1997'de Deep Blue'ya karşı oynayan Garry
Kasparov'a oldukça benziyordu.

Evet, Min en üst sırada üç O almaya yakındı ancak Max bu plana kolayca son
verebilirdi. Peki Max neden bu kadar karamsardı?

#### Oyun ağaçları

Yapay Zeka kullanarak oyunları çözmek için oyun ağacının konseptini
tanıtacağız. Oyunun farklı durumları, oyun ağacındaki düğümlerle temsil
edilir, yukarıdaki planlama problemlerine çok benzer. Fikir biraz farklı.
Oyun ağacında, düğümler oyundaki her oyuncunun oyun sırasına karşılık gelen
seviyelerde düzenlenir, böylece ağacın "kök" düğümü (genellikle şemanın üst
kısmında gösterilir) oyundaki başlangıç pozisyonudur. Tic-tac-toe'da, bu kök
durumu, X veya O'nun henüz hiç oynamadığı boş ızgara durumu olacaktır. Kökün
altında, ikinci seviyede, X veya O, ilk oyuncunun hareketlerinden
kaynaklanabilecek olası durumlar vardır. Bu düğümleri kök düğümün "çocukları"
olarak adlandırıyoruz.

İkinci seviyedeki her bir düğüm, karşı oyuncunun hareketlerinden ulaşılabilen
durumları, kendisinin çocuk düğümleri olarak düğümler. Bu oyunun bittiği
durumlara erişinceye kadar seviye seviye devam eder. Tic-tac-toe'da oyunun
bittiği durumlar şöyledir: Oyunculardan biri yatay, dikey, çapraz üç kareyi
yazarsa kazanır, ya da tahta dolarsa oyun berabere biter.

#### Değeri minimize veya maksimize etme

Oyunu kazanmaya çalışan oyun Yapay Zeka'sı oluşturabilmek için, olası her
sonuca sayısal bir değer ekliyoruz. X'in üçlü bir çizgiye sahip olduğu, yani
Max'in kazanacağı tahta pozisyonlarına, +1 değerini ve aynı şekilde Min'in üç
O ile üst üste kazandığı pozisyonlara -1 değerini ekliyoruz. Tahtanın dolu
olduğu ve oyuncunun kazanamadığı pozisyonlar için, nötr değeri 0 kullanırız.
(Max'in değeri en üst düzeye çıkarmaya çalışması veya Min' in değeri en aza
indirmeye çalışması dışında değerlerin -1, 0 ,1 olması önemli değildir.)

#### Örnek oyun ağacı

Örneğin, kökte değil oyunun ortasında başlayan aşağıdaki oyun ağacını düşünün
(çünkü aksi takdirde ağaç görüntülenemeyecek kadar büyük olur). Bunun, bu
bölümün başındaki resimde gösterilen oyundan farklı olduğunu unutmayın.
Düğümleri 1, 2, ..., 14 sayılarıyla numaralandırdık.

Ağaç, tahtadaki boş yuvaların herhangi birine, Min'in bir O yerleştirme
sırasının veya Max'in bir X yerleştirme sırasının olduğu alternatif
katmanlardan oluşur. Sırası gelecek olan oyuncu solda gösterilir.

![YZ 101 2 Tic-Tac-Toe 2](/assets/img/yz-101-2-tic-tac-toe-2.png "YZ 101 2 Tic-Tac-Toe 2")

Oyun, üstte (1) olarak numaralandırılan kök düğümde gösterilen tahta
konumunda, Min'in üç boş hücreden herhangi birine O yerleştirme sırası ile
devam eder. Düğümler (2) - (4), sırasıyla üç seçeneğin her birinden
kaynaklanan tahta konumlarını gösterir. Sonraki adımda, her düğümün Max'in her
biri X oynaması için iki olası seçeneği vardır ve böylece ağaç tekrar
dallanır.

Yukarıdaki başlangıç konumundan başlarken, oyun her zaman üç sıra ile biter:
(7) ve (9) numaralı düğümlerde kazanan X ile oynayan Max, (11) - (14)
düğümlerinde kazanan O ile oynayan Min.

Oyuncuların sıraları değiştiğinden, seviyelerin Min seviyeler ve Max seviyeler
olarak etiketlenebilir ve bu da kimin sırasının geldiğini gösterir.

#### Stratejik olma

Alttaki görselde, ikinci seviyedeki (5) - (10) düğümlerini düşünün. (7) ve (9)
düğümlerinde oyun sona erer ve Max arka arkaya üç X ile kazanır. Bu
pozisyonların değeri +1'dir. Kalan düğümlerde (5), (6), (8) ve (10) oyun
pratik olarak bitmiştir, çünkü Min'in kazanmak için kalan tek hücreye O
harfini yerleştirmesi yeterlidir. Yani diğer bir deyişle, alttan ikinci
seviyedeki her düğümde oyunun nasıl biteceğini biliyoruz. Bu nedenle (5), (6),
(8) ve (10) düğümlerinin değerinin de -1 olduğuna karar verebiliriz.

![YZ 101 2 Tic-Tac-Toe 3](/assets/img/yz-101-2-tic-tac-toe-3.png "YZ 101 2 Tic-Tac-Toe 3")

İşte ilginç kısım geliyor. Köklere doğru bir seviye daha yüksek olan (2) - (4)
düğümlerin değerlerini düşünelim. (2)'nin çocuklarının her ikisinin de, yani
düğüm (5) ve (6)'nın Min'in zaferine yol açtığını gözlemlediğimiz için,
tereddüt etmeden -1 değerini düğüm (2)'ye de ekleyebiliriz. Bununla birlikte,
düğüm (3) için sol çocuk (7) Max'in galibiyetine, +1, yol açar ancak sağ
çocuk (8) Min'in kazanmasına -1 yol açar. Düğüm (3)'ün değeri nedir? Düğüm
(3)'te seçimi kimin yaptığını aklınızda tutarak bunu bir süre düşünün.

Oyun sırası Max'e geldiğinden, elbette soldaki çocuğu, düğümü (7) seçecektir.
Böylece, düğüm (3)'teki tahta konumuna her ulaştığımızda, Max zaferi garanti
edebilir ve +1 değerini düğüm (3)'e ekleyebiliriz.

Aynısı düğüm (4) için de geçerlidir: Yine, Max X'i nereye koyacağını
seçebildiğinden, zaferi her zaman garantileyebilir ve +1 değerini düğüm (4)'e
ekleriz.

![YZ 101 2 Tic-Tac-Toe 4](/assets/img/yz-101-2-tic-tac-toe-4.png "YZ 101 2 Tic-Tac-Toe 4")

#### Kimin kazanacağını belirlemek

Bu bölümdeki en önemli ders, oyunun sonucunu herhangi bir tahta pozisyonundan
önce belirlemek için yukarıdaki mantık yürütmeyi tekrar tekrar uygulamaktır.

Şimdiye kadar, düğüm (2)'nin değerinin -1 olduğuna karar verdik, yani böyle
bir pano pozisyonuna gelirsek Min kazanmayı sağlayabilir ve düğüm (3) ve (4)
için ise tersi geçerlidir: Onların değerleri +1, yani Max sadece sıra ona
geldiğinde akıllıca oynarsa kazanacağından emin olabilir.

Son olarak, Min tecrübeli bir oyuncu olduğu için aynı sonuca varabildiğini ve
dolayısıyla tek bir gerçek seçeneğinin olduğunu anlayabiliriz: Tahtanın
ortasında O oynamak.

Aşağıdaki diyagramda, her bir düğümün değerini ve ayrıca kök düğümde Min'in
oynama sırasından başlayarak en uygun oyunu ekledik.

![YZ 101 2 Tic-Tac-Toe 5](/assets/img/yz-101-2-tic-tac-toe-5.png "YZ 101 2 Tic-Tac-Toe 5")

#### Kök düğümün değeri = kazanan

Oyunun değeri olduğu söylenen kök düğümün değeri, bize kimin kazandığını (ve
sonuç sadece basit bir kazanma veya kaybetme değilse ne kadar) söyler: Oyunun
değeri +1 ise Max kazanır, -1 ise Min, 0 ise oyun berabere biter. Diğer
oyunlarda, değer başka değerler de alabilir (örneğin, pokerde önünüzdeki
fişlerin parasal değeri gibi).

Bunların hepsi, her iki oyuncunun da kendileri için en iyisini seçtiği ve biri
için en iyisinin diğeri için en kötüsü olduğu varsayımına dayanmaktadır
("sıfır toplamlı oyun" olarak adlandırılır).

> **Not**
>
> **Optimal hareketleri bulmak**
>
> Oyun ağacındaki tüm düğümlerin değerlerini belirledikten sonra, optimal
> hareketler çıkarılabilir: Herhangi bir Min düğümde (Min'in olduğu yerde),
> optimal seçim, değeri minimum olan çocuk düğümü tarafından verilir. Herhangi
> bir Max düğümünde (Max'in olduğu yer), en uygun seçim değeri maksimal olan
> çocuk düğümü tarafından verilir. Bazen, eşit derecede iyi olan çok iyi
> seçimler vardır ve bunların hangisi olursa olsun sonuç aynı olacaktır.

#### Minimax algoritması

Minimax algoritması adı verilen bir algoritma elde etmek için yukarıdaki oyun
değeri kavramını kullanabiliriz. Bu algoritma, teorik olarak, herhangi bir
deterministik, iki kişilik, mükemmel bilgili sıfır toplamlı oyunda optimal
oyun oynamayı garanti eder. Oyunun bir durumu verildiğinde, algoritma, verilen
durumun çocuklarının değerlerini hesaplar ve Max'in sırası ise maksimum değere
sahip olanı ve Min'in sırası ise minimum değere sahip olanı seçer.

Algoritma, birkaç satır kod kullanılarak uygulanabilir. Ancak, ana fikri
kavramış olmaktan memnun kalacağız. Gerçek algoritmaya (uyarı: programlama
gerekli) bir göz atmak isterseniz:
[Tık!](https://en.wikipedia.org/wiki/Minimax#Minimax_algorithm_with_alternate_moves) 

![YZ 101 2 Satranç](/assets/img/yz-101-2-satranc.png "YZ 101 2 Satranç")

#### Kulağa hoş geliyor, şimdi eve gidebilir miyim?

Yukarıda belirtildiği gibi, Minimax algoritması herhangi bir deterministik,
iki oyunculu, mükemmel bilgili sıfır toplamlı oyunda en iyi oyunu uygulamak
için kullanılabilir. Bu tür oyunlar arasında tic-tac-toe, connect four,
satranç, Go vb. bulunur. Taş-kağıt-makas, diğer oyuncudan gizlenen bilgileri
içerdiği için bu oyun sınıfında değildir; deterministik olmayan Monopoly veya
tavla da değildir. İlgilendiğiniz şu konuya gelince; hepsi bu mu millet, artık
eve gidebilir miyiz? Cevap teorik olarak evet ancak pratikte hayır.

> **Not**
>
> **Devasa oyun ağaçları problemi**
>
> Birçok oyunda, oyun ağacı tam olarak hareket etmek için çok büyüktür.
> Örneğin, satrançta ortalama dallanma faktörü, yani düğüm başına ortalama
> çocuk sayısı (mevcut hareketler) yaklaşık 35'tir. Yani, iki hamle ilerideki
> olası tüm senaryoları önceden incelemek için yaklaşık 35 x 35 = 1225 düğümü
> ziyaret etmemiz gerektiği anlamına gelir. Potansiyel üç hamleye göz atmak
> 42875 düğümün ziyaret edilmesini gerektirir; dört hamle 1500625; ve on hamle
> 2758547353515625 (bu yaklaşık 2,7 katrilyon) düğümdür. Go'da, ortalama
> dallanma faktörünün yaklaşık 250 olduğu tahmin edilmektedir. Go, Minimax
> için gitme/gitmez demek (Go means no-go for Minimax.).

#### Daha fazla hile: Büyük oyun ağaçlarını yönetme

Büyük oyun ağaçlarını yönetmek için daha fazla hile gereklidir. Birçoğu, 1997
yılında, satranç dünya şampiyonu Garry Kasparov'u yenmesinde, IBM’in Deep Blue
bilgisayarı için çok önemli unsurlardı.

Oyun ağacının yalnızca küçük bir bölümünü keşfetmeyi göze alabiliyorsak, bir
uç düğüme, yani oyunun bittiği ve kazananın bilindiği bir düğüme ulaşmadan
önce Minimax algoritmasını durdurmanın bir yoluna ihtiyacımız var. Bu,
**sezgisel değerlendirme işlevi (heuristic evaluation function)** olarak
adlandırılır; bir tahta pozisyonu/durumu ve sıradakinin hangi oyuncu olduğunu
alıp, verilen tahtadan devam eden oyunun olası sonucunu döndürür.

> **Not**
>
> **İyi sezgiseller (heuristics)**
>
> Örneğin satranç için iyi bir sesgisel yöntem, genellikle türlerine göre
> ağırlıklandırılan malzeme (taş) miktarını sayar: Vezir genellikle bir
> kalenin yaklaşık iki katı, bir at veya filin üç katı ve piyonun dokuz katı
> değerinde kabul edilir. Elbette kral, diğer tüm şeylerin toplamından daha
> değerlidir, çünkü onu kaybetmek oyunu kaybetmek anlamına gelir. Ayrıca,
> tahtanın ortasına yakın stratejik olarak önemli pozisyonları işgal etmek bir
> avantaj olarak kabul edilir ve sezgisel yöntemler bu tür pozisyonlara daha
> yüksek değer atar.

Yukarıda bahsedilen Minimax algoritması, sezgiselin verilen belirli bir
derinlik sınırında döndürebileceği tüm düğümleri döndürmesi için birazcık
değiştirilmeli (depth-limited): Burada derinlik, sezgisel bir değerlendirme
işlevi uygulanmadan önce oyun ağacının genişletildiği adımların sayısını ifade
eder.

#### Alıştırma 7: Neden bu kadar karamsarsın Max?

Bu bölümün başında anlatılan tic-tac-toe oyununa dönelim. Olası son oyunların
alanını daraltmak için, Max'in yakın bir yenilgiyi önlemek için en üst sıraya
açıkça bir X yerleştirmesi gerektiğini gözlemleyebiliriz:

![YZ 101 2 Tic-Tac-Toe 6](/assets/img/yz-101-2-tic-tac-toe-6.png "YZ 101 2 Tic-Tac-Toe 6")

Şimdi Min'in 0 oynama sırası. Minimax algoritmasını kullanarak oyunun bu
durumunun yanı sıra yukarıdaki konumun kök olduğu oyun ağacındaki diğer
durumların değerini değerlendirin.

**Göreviniz:**

Aşağıdaki tahta konumundan başlayarak oyun ağacına bakın. Bir kalem ve kağıt
kullanarak oyunun bittiği alt düzey düğümlerin değerlerini doldurun. Bu sefer
bazı oyunların berabere biteceğini unutmayın, bu da düğüm değerlerinin 0
olduğu anlamına gelir (-1 veya 1 yerine).

Daha sonra, bir sonraki seviyedeki düğümlerin değerlerini doldurmaya devam
edin. Bu seviyede dallanma olmadığından, ikinci en düşük seviyedeki değerler
en alt seviyedeki ile aynıdır.

İkinci en yüksek seviyede, her düğüm için alt düğümlerin değerlerinin
maksimumunu seçerek değerleri doldurun - fark ettiğiniz gibi, bu bir MAX
düzeyidir. Son olarak, kök düğümün alt düğüm değerlerinin minimumunu seçerek
kök düğümün değerini girin. Bu oyunun değeridir/sonucudur.

**Cevap olarak oyunun değerini girin.**

![YZ 101 2 Alıştırma 7 Tic-Tac-Toe 7](/assets/img/yz-101-2-alistirma-7-tic-tac-toe-7.png "YZ 101 2 Alıştırma 7 Tic-Tac-Toe 7")

**Cevap:** -1

Değer -1'dir. İkinci seviyedeki değerler 0, 0 ve -1'dir. Üçüncü seviyedeki
değerler, alt seviyedeki değerlerle aynı olan -1, 0, -1, 0, -1, -1'dir.
Gördüğünüz gibi, Max'in ciddi olması için tüm nedenler var çünkü sağ alt
köşede oynayarak Min bir galibiyeti garantiler. Min'in kaçınılmaz zaferi,
oyunun -1 değerinden de anlaşılabilir.

> **Not**
>
> **Düz arama sınırlamaları**
>
> Herhangi bir sorunu çözmek için, aralarındaki durumları ve geçişleri
> belirleyerek ve mevcut durumdan hedefimize doğru bir yol bularak ilerlememiz
> bir yönteme sahipmişiz gibi görünebilir. Ne yazık ki, Yapay Zeka'yı gerçek
> dünya problemlerine uygulamak istediğimizde işler daha da karmaşıklaşıyor.
> Temel olarak, orta derecede karmaşık bir gerçek dünya senaryosunda bile
> durumların sayısı giderek artmaktadır ve kapsamlı bir arama ("kaba kuvvet")
> veya hatta akıllı buluşsal yöntemler kullanarak bir çözüm bulamıyoruz.
>
> Dahası, bir eylemi seçerken bizi bir durumdan diğerine götüren geçişler
> deterministik değildir. Bu, yapmayı seçtiğimiz her şeyin sonucunun her zaman
> tam olarak belirlenemeyeceği anlamına gelir, çünkü bizim kontrolümüz dışında
> kalan ve genellikle bizim için bilinmeyen faktörler vardır.
>
> Yukarıda tartıştığımız algoritmalar, örneğin zar atma veya rasgele bir
> desteden kartların seçimindeki rasgelelik gibi, bazı rasgelelerin işlenmesi
> için adapte edilebilir. Bu, belirsizlik ve olasılık kavramını tanıtmamız
> gerektiği anlamına gelir. Yalnızca bu sayede basit bulmacalar ve oyunlar
> yerine gerçek dünyadaki Yapay Zeka'ya yaklaşmaya başlayabiliriz. Bu, Bölüm
> 3'ün konusudur.

---

![YZ 101 1 Yıldız](/assets/img/yildiz.png "YZ 101 1 Yıldız")
![YZ 101 2 Yıldız](/assets/img/yildiz.png "YZ 101 2 Yıldız")
{: style="text-align: center;"}

**Bölüm 2'yi tamamladıktan sonra şunları yapabilmeniz gerekir:**

+ Bir gerçek dünya problemini arama problemi olarak formüle etme.
+ Basit bir oyunu (tic-tac-toe gibi) oyun ağacı olarak formüle etme.
+ Sınırlı bir oyun ağacında en uygun hareketleri bulmak için minimax
  prensibini kullanma.

[![YZ 101 Bölüm 1](/assets/img/maze-mini.png "1. Yapay Zeka Nedir?")](/ai/2020/10/05/yapay-zeka-101-1.html)
[![YZ 101 Bölüm 2](/assets/img/maze-mini.png "2. Yapay Zeka Problemi Çözme")](/ai/2020/10/06/yapay-zeka-101-2.html)
[![YZ 101 Bölüm 3](/assets/img/maze-mini.png "3. Gerçek Dünyada Yapay Zeka")](/ai/2020/10/07/yapay-zeka-101-3.html)
[![YZ 101 Bölüm 4](/assets/img/maze-mini.png "4. Makine Öğrenmesi (Machine Learning)")](/ai/2020/10/08/yapay-zeka-101-4.html)
[![YZ 101 Bölüm 5](/assets/img/maze-mini.png "5. Sinir Ağları (Neural Networks)")](/ai/2020/10/09/yapay-zeka-101-5.html)
{: style="text-align: center;"}
